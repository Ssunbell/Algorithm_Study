import sys

input = lambda: sys.stdin.readline().strip()

n, k = map(int, input().split())
list_coin = [int(input()) for _ in range(n)]

dp = [0 for _ in range(k+1)]
dp[0] = 1
for i in list_coin:
    for j in range(i, k+1):
        dp[j] += dp[j-i]
print(dp[k])
'''
1원일 때,
0 1 2 3 4 5 6 7 8 9 10
  1 1 1 1 1 1 1 1 1 1  1원일 경우 모두 한 가지 방법밖에 존재하지 않음[1 x 10]

2원일 때,
0 1 2 3 4 5 6 7 8 9 10
  0 1                  2를 만들기 위해서는 2원 하나만 필요, 하지만 1원으로 2를 만드는 경우 1+1이 있으므로 총 경우의 수는 2
    2

0 1 2 3 4 5 6 7 8 9 10 
  0 1 1 2              3을 만들기 위해서는 2+1 밖에 없으므로 1만 추가, but 1+1+1, 2+1 이므로 총 경우의 수는 2
    2 2 3              4를 만들기 위해서는 4 - 2 값인 2를 만드는 경우의 수와 동일함. [(2)+1+1, (2)+2] 여기에 1로만 구성되어 있는 경우의 수 1을 더하면 3이 됨

0 1 2 3 4 5 6 7 8 9 10 
  0 1 1 2 2 3          5을 만들기 위해서는 4와 같이 3을 만드는 경우의 수와 동일함. 따라서 3을 만드는 총 경우의 수 2 여기에 1로만 구성되어 있는 경우의 수 1을 더하면 모든 경우의 수 2 + 1 = 3
    2 2 3 3 4          6를 만들기 위해서는 6(j) - 2(i) 값인 4를 만드는 경우의 수 3개와 동일함. 3 + 1 = 4
'''